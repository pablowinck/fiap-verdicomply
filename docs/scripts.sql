CREATE TABLE NormaAmbiental (
    idNorma NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    codigoNorma VARCHAR2(20) NOT NULL,
    descricao VARCHAR2(200),
    orgaoFiscalizador VARCHAR2(100)
);

INSERT INTO
    NormaAmbiental (codigoNorma, descricao, orgaoFiscalizador)
VALUES
    ('N001', 'Emissão de CO2 controlada', 'IBAMA');

INSERT INTO
    NormaAmbiental (codigoNorma, descricao, orgaoFiscalizador)
VALUES
    (
        'N002',
        'Descarte correto de resíduos químicos',
        'CETESB'
    );

INSERT INTO
    NormaAmbiental (codigoNorma, descricao, orgaoFiscalizador)
VALUES
    ('N003', 'Uso racional de água', 'ANA');

INSERT INTO
    NormaAmbiental (codigoNorma, descricao, orgaoFiscalizador)
VALUES
    ('N004', 'Tratamento de efluentes', 'IBAMA');

INSERT INTO
    NormaAmbiental (codigoNorma, descricao, orgaoFiscalizador)
VALUES
    ('N005', 'Controle de poluição sonora', 'CONAMA');

-- ################################################################################
CREATE TABLE Departamento (
    idDepartamento NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nomeDepartamento VARCHAR2(100) NOT NULL
);

INSERT INTO
    Departamento (nomeDepartamento)
VALUES
    ('Manufatura');

INSERT INTO
    Departamento (nomeDepartamento)
VALUES
    ('Logística');

INSERT INTO
    Departamento (nomeDepartamento)
VALUES
    ('TI Sustentável');

INSERT INTO
    Departamento (nomeDepartamento)
VALUES
    ('Infraestrutura');

INSERT INTO
    Departamento (nomeDepartamento)
VALUES
    ('Recursos Naturais');

-- ################################################################################
CREATE TABLE Auditoria (
    idAuditoria NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    idDepartamento NUMBER NOT NULL,
    dataAuditoria DATE DEFAULT SYSDATE,
    auditorResponsavel VARCHAR2(100),
    statusAuditoria VARCHAR2(20),
    CONSTRAINT fk_auditoria_departamento FOREIGN KEY (idDepartamento) REFERENCES Departamento(idDepartamento)
);

INSERT INTO
    Auditoria (
        idDepartamento,
        dataAuditoria,
        auditorResponsavel,
        statusAuditoria
    )
VALUES
    (
        1,
        TO_DATE('2024-10-01', 'YYYY-MM-DD'),
        'Carlos Silva',
        'CONCLUÍDA'
    );

INSERT INTO
    Auditoria (
        idDepartamento,
        dataAuditoria,
        auditorResponsavel,
        statusAuditoria
    )
VALUES
    (
        2,
        TO_DATE('2024-10-03', 'YYYY-MM-DD'),
        'Renata Lima',
        'CONCLUÍDA'
    );

INSERT INTO
    Auditoria (
        idDepartamento,
        dataAuditoria,
        auditorResponsavel,
        statusAuditoria
    )
VALUES
    (
        3,
        TO_DATE('2024-10-05', 'YYYY-MM-DD'),
        'André Souza',
        'PENDENTE'
    );

INSERT INTO
    Auditoria (
        idDepartamento,
        dataAuditoria,
        auditorResponsavel,
        statusAuditoria
    )
VALUES
    (
        4,
        TO_DATE('2024-10-07', 'YYYY-MM-DD'),
        'Mariana Costa',
        'CONCLUÍDA'
    );

INSERT INTO
    Auditoria (
        idDepartamento,
        dataAuditoria,
        auditorResponsavel,
        statusAuditoria
    )
VALUES
    (
        5,
        TO_DATE('2024-10-09', 'YYYY-MM-DD'),
        'Juliana Lopes',
        'CONCLUÍDA'
    );

-- ################################################################################
CREATE TABLE Conformidade (
    idConformidade NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    idAuditoria NUMBER NOT NULL,
    idNorma NUMBER NOT NULL,
    estaConforme CHAR(1) CHECK (estaConforme IN ('S', 'N')),
    observacao VARCHAR2(200),
    CONSTRAINT fk_conformidade_auditoria FOREIGN KEY (idAuditoria) REFERENCES Auditoria(idAuditoria),
    CONSTRAINT fk_conformidade_norma FOREIGN KEY (idNorma) REFERENCES NormaAmbiental(idNorma)
);

INSERT INTO
    Conformidade (idAuditoria, idNorma, estaConforme, observacao)
VALUES
    (
        1,
        1,
        'S',
        'Todos os filtros estão dentro do padrão'
    );

INSERT INTO
    Conformidade (idAuditoria, idNorma, estaConforme, observacao)
VALUES
    (1, 2, 'N', 'Resíduos não separados corretamente');

INSERT INTO
    Conformidade (idAuditoria, idNorma, estaConforme, observacao)
VALUES
    (2, 3, 'S', 'Consumo monitorado via sensores');

INSERT INTO
    Conformidade (idAuditoria, idNorma, estaConforme, observacao)
VALUES
    (3, 4, 'N', 'Sistema de tratamento inoperante');

INSERT INTO
    Conformidade (idAuditoria, idNorma, estaConforme, observacao)
VALUES
    (4, 5, 'S', 'Nível de ruído dentro do aceitável');

INSERT INTO
    Conformidade (idAuditoria, idNorma, estaConforme, observacao)
VALUES
    (
        5,
        1,
        'N',
        'Falta de relatório mensal sobre emissões'
    );

-- ################################################################################
CREATE TABLE Pendencia (
    idPendencia NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    idConformidade NUMBER NOT NULL,
    descricaoPendencia VARCHAR2(200),
    prazoResolucao DATE,
    resolvida CHAR(1) DEFAULT 'N' CHECK (resolvida IN ('S', 'N')),
    CONSTRAINT fk_pendencia_conformidade FOREIGN KEY (idConformidade) REFERENCES Conformidade(idConformidade)
);

INSERT INTO
    Pendencia (
        idConformidade,
        descricaoPendencia,
        prazoResolucao,
        resolvida
    )
VALUES
    (
        2,
        'Separar resíduos químicos e orgânicos corretamente',
        TO_DATE('2024-11-01', 'YYYY-MM-DD'),
        'N'
    );

INSERT INTO
    Pendencia (
        idConformidade,
        descricaoPendencia,
        prazoResolucao,
        resolvida
    )
VALUES
    (
        4,
        'Reativar sistema de tratamento de efluentes',
        TO_DATE('2024-10-20', 'YYYY-MM-DD'),
        'N'
    );

INSERT INTO
    Pendencia (
        idConformidade,
        descricaoPendencia,
        prazoResolucao,
        resolvida
    )
VALUES
    (
        6,
        'Atualizar planilha de emissões mensais',
        TO_DATE('2024-10-15', 'YYYY-MM-DD'),
        'S'
    );

-- ATIVIDADE 1 - Trigger AFTER INSERT – Geração automática de pendência ao registrar uma não conformidade
CREATE
OR REPLACE TRIGGER trg_gera_pendencia
AFTER
INSERT
    ON Conformidade FOR EACH ROW
    WHEN (NEW.estaConforme = 'N') BEGIN
INSERT INTO
    Pendencia (
        idConformidade,
        descricaoPendencia,
        prazoResolucao,
        resolvida
    )
VALUES
    (
        :NEW.idConformidade,
        'Pendência automática gerada a partir de não conformidade',
        SYSDATE + 15,
        'N'
    );

END;

-- ATIVIDADE 2 - Atualização automática do status da auditoria para “CONCLUÍDA”
CREATE
OR REPLACE PROCEDURE atualizar_status_auditoria(p_idAuditoria IN NUMBER) IS v_total_conformidades NUMBER;

BEGIN
SELECT
    COUNT(*) INTO v_total_conformidades
FROM
    Conformidade
WHERE
    idAuditoria = p_idAuditoria;

IF v_total_conformidades >= 3 THEN
UPDATE
    Auditoria
SET
    statusAuditoria = 'CONCLUÍDA'
WHERE
    idAuditoria = p_idAuditoria;

END IF;

END;

-- ATIVIDADE 3 - Identificação de pendências vencidas e não resolvidas (simulação de alerta)
CREATE
OR REPLACE PROCEDURE verificar_pendencias_vencidas IS BEGIN FOR r IN (
    SELECT
        idPendencia,
        descricaoPendencia,
        prazoResolucao
    FROM
        Pendencia
    WHERE
        resolvida = 'N'
        AND prazoResolucao < SYSDATE
) LOOP DBMS_OUTPUT.PUT_LINE(
    '⚠ Pendência atrasada: ID ' || r.idPendencia || ' - ' || r.descricaoPendencia
);

END LOOP;

END;

-- ATIVIDADE 4 - Trigger AFTER INSERT OR UPDATE – Registro automático de log de conformidade
CREATE TABLE LogConformidade (
    idLog NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    idConformidade NUMBER,
    acao VARCHAR2(20),
    dataRegistro DATE DEFAULT SYSDATE,
    detalhes VARCHAR2(200)
);

CREATE
OR REPLACE TRIGGER trg_log_conformidade
AFTER
INSERT
    OR
UPDATE
    ON Conformidade FOR EACH ROW BEGIN
INSERT INTO
    LogConformidade (idConformidade, acao, detalhes)
VALUES
    (
        NVL(:NEW.idConformidade, :OLD.idConformidade),
        CASE
            WHEN INSERTING THEN 'INSERÇÃO'
            ELSE 'ALTERAÇÃO'
        END,
        'Conformidade: ' || :NEW.estaConforme || ', Obs: ' || :NEW.observacao
    );

END;