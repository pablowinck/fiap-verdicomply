name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/verdicomply-api
  JAVA_VERSION: '17'

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'maven'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build with Maven
        run: mvn clean package -DskipTests -B

      - name: Run Unit Tests
        run: mvn test -P unit-tests

      # Integration tests disabled - Newman tests provide comprehensive API coverage
      # - name: Run Integration Tests
      #   run: mvn verify -P integration-tests

      - name: Generate Test Coverage Report
        run: mvn jacoco:report
        continue-on-error: true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: jar-file
          path: target/*.jar
          retention-days: 1

  docker-build-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: docker-build-push
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.verdicomply.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Staging Server
        run: |
          echo "Deploying to staging environment..."
          echo "Image: ${{ env.DOCKER_IMAGE }}:develop-${{ github.sha }}"
          # Aqui você adicionaria os comandos para deploy real
          # Exemplo: SSH para servidor, docker-compose pull, docker-compose up -d

      - name: Run Smoke Tests
        run: |
          echo "Running smoke tests on staging..."
          # curl https://staging.verdicomply.com/health

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: docker-build-push
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://verdicomply.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Production Server
        run: |
          echo "Deploying to production environment..."
          echo "Image: ${{ env.DOCKER_IMAGE }}:latest"
          # Aqui você adicionaria os comandos para deploy real
          # Exemplo: SSH para servidor, docker-compose pull, docker-compose up -d

      - name: Run Smoke Tests
        run: |
          echo "Running smoke tests on production..."
          # curl https://verdicomply.com/health

      - name: Notify deployment success
        run: |
          echo "Production deployment completed successfully!"
